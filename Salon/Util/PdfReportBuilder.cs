using iText.Kernel.Pdf;
using iText.Kernel.Font;
using iText.IO.Font.Constants;
using iText.IO.Image;
using iText.Layout;
using iText.Layout.Element;
using iText.Layout.Properties;
using iText.Layout.Borders;
using iText.Kernel.Geom;
using System;
using System.Collections.Generic;
using System.IO;
using System.Windows.Forms;

public class PdfReportBuilder
{
    private readonly string _filePath;
    private readonly string _reportTitle;
    private readonly Dictionary<string, string> _summary;
    private readonly DataGridView _grid;
    private readonly string _generatedBy;
    private readonly string _logoPath;
    private readonly DateTime? _startDate;
    private readonly DateTime? _endDate;

    public PdfReportBuilder(string filePath, string reportTitle, Dictionary<string, string> summary, DataGridView grid, string generatedBy, string logoPath, DateTime? startDate = null, DateTime? endDate = null)
    {
        _filePath = filePath;
        _reportTitle = reportTitle;
        _summary = summary;
        _grid = grid;
        _generatedBy = generatedBy;
        _logoPath = logoPath;
        _startDate = startDate;
        _endDate = endDate;
    }
    public PdfReportBuilder(string filePath, string reportTitle, Dictionary<string, string> summary, DataGridView grid, string generatedBy, string logoPath)
    : this(filePath, reportTitle, summary, grid, generatedBy, logoPath, null, null)
    { }

    public void Export()
    {
        PdfFont boldFont = PdfFontFactory.CreateFont(StandardFonts.HELVETICA_BOLD);
        PdfFont regularFont = PdfFontFactory.CreateFont(StandardFonts.HELVETICA);

        using (PdfWriter writer = new PdfWriter(_filePath))
        using (PdfDocument pdf = new PdfDocument(writer))
        using (Document doc = new Document(pdf, PageSize.A4))
        {
            // Logo
            if (File.Exists(_logoPath))
            {
                ImageData imageData = ImageDataFactory.Create(_logoPath);
                Image logo = new Image(imageData)
                    .ScaleToFit(80, 80)
                    .SetHorizontalAlignment(iText.Layout.Properties.HorizontalAlignment.LEFT);
                doc.Add(logo);
            }

            // Header
            doc.Add(new Paragraph("Kindeo Salon Management System").SetFont(boldFont).SetFontSize(14).SetTextAlignment(TextAlignment.CENTER));
            doc.Add(new Paragraph(_reportTitle).SetFont(boldFont).SetFontSize(12).SetTextAlignment(TextAlignment.CENTER));
            doc.Add(new Paragraph($"Generated by: {_generatedBy}").SetFont(regularFont).SetFontSize(10).SetTextAlignment(TextAlignment.RIGHT));
            doc.Add(new Paragraph($"Generated on: {DateTime.Now:yyyy-MM-dd HH:mm:ss}").SetFont(regularFont).SetFontSize(10).SetTextAlignment(TextAlignment.RIGHT));

            if (_startDate.HasValue && _endDate.HasValue)
            {
                doc.Add(new Paragraph($"Report Range: {_startDate:yyyy-MM-dd} to {_endDate:yyyy-MM-dd}").SetFont(regularFont).SetFontSize(10).SetTextAlignment(TextAlignment.RIGHT));
            }

            doc.Add(new Paragraph("").SetMarginTop(5));

            // Dynamic Summary Layout
            int columns = Math.Min(_summary.Count, 3);
            Table summaryTable = new Table(UnitValue.CreatePercentArray(columns)).UseAllAvailableWidth().SetMarginBottom(10);

            int count = 0;
            foreach (var item in _summary)
            {
                summaryTable.AddCell(new Cell()
                    .Add(new Paragraph($"{item.Key}\n{item.Value}").SetFont(boldFont).SetFontSize(10))
                    .SetTextAlignment(TextAlignment.CENTER)
                    .SetPadding(2)
                    .SetBorder(Border.NO_BORDER));
                count++;
                if (count % columns == 0 && count < _summary.Count)
                {
                    // Add empty row to force new line
                    for (int i = 0; i < columns; i++)
                        summaryTable.AddCell(new Cell().SetBorder(Border.NO_BORDER));
                }
            }

            doc.Add(summaryTable);

            // Transaction Table
            Table table = new Table(_grid.Columns.Count).UseAllAvailableWidth();
            foreach (DataGridViewColumn col in _grid.Columns)
            {
                table.AddHeaderCell(new Cell().Add(new Paragraph(col.HeaderText).SetFont(boldFont).SetFontSize(10)));
            }

            foreach (DataGridViewRow row in _grid.Rows)
            {
                if (!row.IsNewRow)
                {
                    foreach (DataGridViewCell cell in row.Cells)
                    {
                        table.AddCell(new Cell().Add(new Paragraph(cell.Value?.ToString() ?? "").SetFont(regularFont).SetFontSize(9)));
                    }
                }
            }

            doc.Add(table);

            // Footer with page numbers
            int totalPages = pdf.GetNumberOfPages();
            for (int i = 1; i <= totalPages; i++)
            {
                doc.ShowTextAligned(new Paragraph($"Page {i} of {totalPages}").SetFont(regularFont).SetFontSize(9),
                    pdf.GetDefaultPageSize().GetWidth() - 40, 20, i, TextAlignment.RIGHT, VerticalAlignment.BOTTOM, 0);
            }
        }
    }
}